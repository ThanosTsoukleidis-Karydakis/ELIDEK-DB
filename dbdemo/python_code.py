## This file is ran automatically the first time a Python program imports the package dbdemo
from flask import Flask, render_template, request, flash, redirect, url_for, abort
from flask_mysqldb import MySQL
from forms import ResearcherForm, EvaluationForm, ProjectForm, ProgramForm, ExecutiveForm, WorksonForm, AdministratesForm

## __name__ is the name of the module. When running directly from python, it will be 'dbdemo'
## Outside of this module, as in run.py, it is '__main__' by default
## Create an instance of the Flask class to be used for request routing
app = Flask(__name__)

## configuration of database

app.config["MYSQL_USER"] = 'root'
app.config["MYSQL_PASSWORD"] = ''
app.config["MYSQL_DB"] = 'elidek'
app.config["MYSQL_HOST"] = 'localhost'
app.config["SECRET_KEY"] = 'Hello' ## secret key for sessions (signed cookies). Flask uses it to protect the contents of the user session against tampering.
app.config["WTF_CSRF_SECRET_KEY"] = 'Hello42' ## token for csrf protection of forms.
## secret keys can be generated by secrets.token_hex()

## initialize database connection object
db = MySQL(app)


@app.route("/", methods = ["GET"])
def index():
	return render_template("main_page.html")

@app.route("/drop_test", methods = ["GET"])
def index29():
	return render_template("drop_test.html")

@app.route("/query3-4", methods = ["GET"])
def index1():
	try:
		cur = db.connection.cursor()
		cur.execute("select org1.org_name, org1.counter, org1.starting_year from (select org.org_name as org_name, count(proj.project_id) as counter, extract(year from proj.starting_date) as starting_year from organisation org inner join project proj on proj.org_name=org.org_name group by org.org_name, extract(year from proj.starting_date) ) org1 inner join (select org.org_name as org_name, count(proj.project_id) as counter, extract(year from proj.starting_date) as starting_year from organisation org inner join project proj on proj.org_name=org.org_name group by org.org_name, extract(year from proj.starting_date) ) org2 on org1.org_name=org2.org_name  where org1.counter=org2.counter and org1.starting_year=org2.starting_year+1 -- -- and org1.counter>=10 --;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("query3-4.html", QUERY4 = res)


@app.route("/query3-5", methods = ["GET"])
def index2():
	try:
		cur = db.connection.cursor()
		cur.execute("select concat(awa1.field_name,' - ', awa2.field_name) as Field_Couple, count(awa1.project_id) as Counter from (  select sf.field_name as field_name, proj.project_id as project_id from scientific_field sf  inner join concerns con on sf.field_name=con.field_name inner join project proj on proj.project_id=con.project_id   ) awa1  inner join  (   select sf.field_name as field_name, proj.project_id as project_id from scientific_field sf  inner join concerns con on sf.field_name=con.field_name inner join project proj on proj.project_id=con.project_id   ) awa2  on awa1.project_id=awa2.project_id  where awa1.field_name < awa2.field_name group by field_couple order by  Counter desc limit 3;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("query3-5.html", QUERY5 = res)



@app.route("/query3-6", methods = ["GET"])
def index3():
	try:
		cur = db.connection.cursor()
		cur.execute("select concat(q.first_name,' ', q.last_name) as Researcher_Name, count(*) as Number_Of_Projects from  (select res.first_name, res.last_name, res.res_id, res.birth_date, proj.project_id from  researcher as res  inner join works_on as wo on wo.res_id=res.res_id inner join project as proj on wo.project_id=proj.project_id where ((CURDATE()-res.birth_date)/10000 < 40) and proj.ending_date>=CURDATE() union  select res.first_name, res.last_name, res.res_id, res.birth_date,proj.project_id from  researcher as res  inner join administrates as adm on adm.res_id=res.res_id inner join project as proj on adm.project_id=proj.project_id where ((CURDATE()-res.birth_date)/10000 < 40) and proj.ending_date>=CURDATE() )as q  group by res_id order by Number_Of_Projects desc;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("query3-6.html", QUERY6 = res)


@app.route("/query3-7", methods = ["GET"])
def index4():
	try:
		cur = db.connection.cursor()
		cur.execute("select concat(exec_proj.executive_id,' : ',exec_proj.first_name,' ',exec_proj.last_name) as Executive, sum(exec_proj.grant_amount) as Total_Given_Funds from ( select exec.executive_id,exec.first_name,exec.last_name, proj.project_id,proj.grant_amount  from executive as exec inner join project as proj on proj.executive_id=exec.executive_id  inner join organisation as org on org.org_name=proj.org_name  inner join corporation as corp on corp.corp_name=org.org_name )as exec_proj group by exec_proj.executive_id order by Total_Given_Funds desc limit 5;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("query3-7.html", QUERY7 = res)



@app.route("/query3-8", methods = ["GET"])
def index5():
	try:
		cur = db.connection.cursor()
		cur.execute("select concat(q.first_name,' ', q.last_name) as Researcher_Name, count(*) as Number_Of_Projects from  (select res.first_name, res.last_name, res.res_id, res.birth_date, proj.project_id from  researcher as res  inner join works_on as wo on wo.res_id=res.res_id inner join project as proj on wo.project_id=proj.project_id where proj.ending_date>=CURDATE() and not exists ( select del.project_id from deliverable as del where del.project_id=proj.project_id ) union  select res.first_name, res.last_name, res.res_id, res.birth_date,proj.project_id from researcher as  res  inner join administrates as adm on adm.res_id=res.res_id inner join project as proj on adm.project_id=proj.project_id where proj.ending_date>=CURDATE() and not exists ( select del.project_id from deliverable as del where del.project_id=proj.project_id ) )as q  group by res_id having Number_Of_Projects>=5 order by Number_Of_Projects desc;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("query3-8.html", QUERY8 = res)


@app.route("/view_Organisations_Scientific_Fields", methods = ["GET"])
def index6():
	try:
		cur = db.connection.cursor()
		cur.execute("select *from Organisations_Scientific_Fields")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("view_Organisations_Scientific_Fields.html", VIEW_Organisations_Scientific_Fields = res)

@app.route("/view_Projects_Per_Researcher", methods = ["GET"])
def index7():
	try:
		cur = db.connection.cursor()
		cur.execute("select *from Projects_Per_Researcher")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("view_Projects_Per_Researcher.html", VIEW_Projects_Per_Researcher = res)


@app.route("/query3-3", methods = ["GET"])
def index8():
	try:
		cur = db.connection.cursor()
		cur.execute("(select sf.field_name, proj.title as proj_title, concat(res.first_name,' ',res.last_name) as Researcher_Name, 'Administrator' as Researcher_Role from scientific_field as sf  inner join concerns as con on sf.field_name=con.field_name inner join project as proj on proj.project_id=con.project_id  inner join administrates as adm on adm.project_id=proj.project_id inner join researcher as res on res.res_id=adm.res_id where proj.ending_date>=CURDATE()  union  select sf.field_name, proj.title as proj_title, concat(res.first_name,' ',res.last_name) as Researcher_Name, 'Worker' as Researcher_Role from scientific_field as sf  inner join concerns as con on sf.field_name=con.field_name inner join project as proj on proj.project_id=con.project_id inner join works_on as wo on wo.project_id=proj.project_id inner join researcher as res on res.res_id=wo.res_id where proj.ending_date>=CURDATE()  ) order by field_name, proj_title,Researcher_Role;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("query3-3-new.html", QUERY3 = res)



@app.route("/query3-1b", methods = ["GET"])
def index200():
	try:
		cur = db.connection.cursor()
		cur.execute("select subq.prog_name, subq.proj_title as proj_title,subq.starting_date, subq.duration, concat(ex.first_name, ' ', ex.last_name) as exec_name, subq.res_name,subq.Researcher_Role from ( (select prog.prog_name, proj.title as proj_title,proj.starting_date,  TIMESTAMPDIFF(month, proj.starting_date,proj.ending_date) as duration, proj.executive_id, concat(res.first_name,' ',res.last_name) as res_name,'Worker' as Researcher_Role from program as prog  inner join project as proj on proj.program_id=prog.program_id inner join works_on as wo on wo.project_id=proj.project_id inner join researcher as res on res.res_id=wo.res_id ) union (select prog.prog_name, proj.title as proj_title,proj.starting_date,  TIMESTAMPDIFF(month, proj.starting_date,proj.ending_date) as duration, proj.executive_id, concat(res.first_name,' ',res.last_name) as res_name, 'Administrator' as Researcher_Role from program as prog  inner join project as proj on proj.program_id=prog.program_id inner join administrates as adm on adm.project_id=proj.project_id inner join researcher as res on res.res_id=adm.res_id ) )as subq inner join executive as ex on ex.executive_id=subq.executive_id order by subq.prog_name,subq.proj_title;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]

	except Exception as e:
		print(e)
		res = []
	return render_template("query3-1-search.html",QUERY52 = res)



@app.route("/drop-down-xazo", methods = ["GET"])
def index11():
	return render_template("drop_down_xazo.html")


@app.route("/researchers", methods = ["GET", "POST"]) ## "GET" by default
def createResearcher():
    """
    Add new researcher in the database
    """
    form = ResearcherForm()
    ## when the form is submitted
    if(request.method == "POST"):
        newResearcher = form.__dict__
        query = "INSERT INTO researcher(res_id, first_name,last_name, gender, birth_date, org_name) VALUES (NULL,'{}', '{}', '{}', '{}', '{}');".format(newResearcher['first_name'].data, newResearcher['last_name'].data, newResearcher['gender'].data, newResearcher['birth_date'].data, newResearcher['org_name'].data)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Researcher inserted successfully", "success")
            return redirect(url_for("createResearcher"))
        except Exception as e: ## OperationalError
            flash(str(e), "danger")

    ## else, response for GET request
    return render_template("researcher-create.html", form = form)

@app.route("/researchers/delete-update", methods = ["GET"])
def getResearcher():
	try:
		form = ResearcherForm()
		cur = db.connection.cursor()
		cur.execute("select *from researcher;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("researchers.html", QUERY20 = res, form = form)



@app.route("/researchers/delete-update/update/<int:researcherID>", methods = ["POST"])
def updateResearcher(researcherID):
    """
    Update a researcher in the database, by id
    """
    form = ResearcherForm()
    updateData = form.__dict__
    if(form.validate_on_submit()):
        query = "UPDATE researcher SET first_name = '{}', last_name = '{}', gender = '{}',birth_date = '{}', org_name = '{}' WHERE res_id = {};".format(updateData['first_name'].data, updateData['last_name'].data, updateData['gender'].data,updateData['birth_date'].data,updateData['org_name'].data, researcherID)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Researcher updated successfully", "success")
        except Exception as e:
            flash(str(e), "danger")
    else:
        for category in form.errors.values():
            for error in category:
                flash(error, "danger")
    return redirect(url_for("getResearcher"))


@app.route("/researchers/delete-update/delete/<int:researcherID>", methods = ["POST"])
def deleteResearcher(researcherID):
    """
    Delete researcher by id from database
    """
    query = f"DELETE FROM researcher WHERE res_id = {researcherID} ;"
    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Researcher deleted successfully", "primary")
    except Exception as e:
        flash(str(e), "danger")
    return redirect(url_for("getResearcher"))



@app.route("/required_evaluation", methods = ["GET", "POST"]) ## "GET" by default
def createEvaluation():
    """
    Add new evaluation in the database
    """
    form = EvaluationForm()
    ## when the form is submitted
    if(request.method == "POST"):
        newEvaluation = form.__dict__
        query = "INSERT INTO evaluation(evaluation_id, res_id,eval_date, grade) VALUES (NULL,'{}', '{}', '{}');".format(newEvaluation['res_id'].data, newEvaluation['eval_date'].data, newEvaluation['grade'].data)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Evaluation inserted successfully", "success")
            return redirect(url_for("createProject"))
        except Exception as e: ## OperationalError
            flash(str(e), "danger")

    ## else, response for GET request
    return render_template("evaluation-create.html", form = form)





@app.route("/required_evaluation/projects", methods = ["GET", "POST"]) ## "GET" by default
def createProject():
    """
    Add new evaluation in the database
    """
    form = ProjectForm()
    ## when the form is submitted
    if(request.method == "POST"):
        newProject = form.__dict__
        query = "INSERT INTO project(project_id, org_name,title, summary, grant_amount, starting_date, ending_date, evaluation_id, executive_id, program_id) VALUES (NULL,'{}', '{}', '{}', '{}', '{}', '{}', (select max(evaluation_id) as maximum from evaluation), '{}', '{}');".format(newProject['org_name'].data, newProject['title'].data,  newProject['summary'].data, newProject['grant_amount'].data, newProject['starting_date'].data, newProject['ending_date'].data, newProject['executive_id'].data,newProject['program_id'].data)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Project inserted successfully", "success")
            return redirect(url_for("createProject"))
        except Exception as e: ## OperationalError
            flash(str(e), "danger")
    ## else, response for GET request
    return render_template("project-create.html", form = form)



@app.route("/required_evaluation/projects-delete-update", methods = ["GET"])
def getProject():
	try:
		form = ProjectForm()
		cur = db.connection.cursor()
		cur.execute("select *from project;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("projects.html", QUERY21 = res, form = form)








@app.route("/required_evaluation/projects-delete-update/update/<int:projectID>", methods = ["POST"])
def updateProject(projectID):
    """
    Update a researcher in the database, by id
    """
    form = ProjectForm()
    updateData = form.__dict__
    if(form.validate_on_submit()):
        query = "UPDATE project SET org_name = '{}', title = '{}', summary = '{}',grant_amount = '{}', starting_date = '{}', ending_date = '{}', evaluation_id = '{}', executive_id = '{}',program_id = '{}' WHERE project_id = {};".format(updateData['org_name'].data, updateData['title'].data, updateData['summary'].data,updateData['grant_amount'].data,updateData['starting_date'].data,updateData['ending_date'].data,updateData['evaluation_id'].data,updateData['executive_id'].data,updateData['program_id'].data, projectID)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Project updated successfully", "success")
        except Exception as e:
            flash(str(e), "danger")
    else:
        for category in form.errors.values():
            for error in category:
                flash(error, "danger")
    return redirect(url_for("getProject"))


@app.route("/required_evaluation/projects-delete-update/delete/<int:projectID>", methods = ["POST"])
def deleteProject(projectID):
    """
    Delete project by id from database
    """
    query = f"DELETE FROM project WHERE project_id = {projectID} ;"
    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Project deleted successfully", "primary")
    except Exception as e:
        flash(str(e), "danger")
    return redirect(url_for("getProject"))










@app.route("/programs", methods = ["GET", "POST"]) ## "GET" by default
def createProgram():
    """
    Add new program in the database
    """
    form = ProgramForm()
    ## when the form is submitted
    if(request.method == "POST"):
        newProgram = form.__dict__
        query = "INSERT INTO program(program_id, prog_name,directorate) VALUES (NULL,'{}', '{}');".format(newProgram['prog_name'].data, newProgram['directorate'].data)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Program inserted successfully", "success")
            return redirect(url_for("createProgram"))
        except Exception as e: ## OperationalError
            flash(str(e), "danger")
    ## else, response for GET request
    return render_template("program-create.html", form = form)





@app.route("/programs/delete-update", methods = ["GET"])
def getProgram():
	try:
		form = ProgramForm()
		cur = db.connection.cursor()
		cur.execute("select *from program;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("programs.html", QUERY23 = res, form = form)








@app.route("/programs/delete-update/update/<int:programID>", methods = ["POST"])
def updateProgram(programID):
    """
    Update a program in the database, by id
    """
    form = ProgramForm()
    updateData = form.__dict__
    if(form.validate_on_submit()):
        query = "UPDATE program SET prog_name = '{}', directorate = '{}' WHERE program_id = {};".format(updateData['prog_name'].data, updateData['directorate'].data, programID)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Program updated successfully", "success")
        except Exception as e:
            flash(str(e), "danger")
    else:
        for category in form.errors.values():
            for error in category:
                flash(error, "danger")
    return redirect(url_for("getProgram"))


@app.route("/programs/delete-update/delete/<int:programID>", methods = ["POST"])
def deleteProgram(programID):
    """
    Delete program by id from database
    """
    query = f"DELETE FROM program WHERE program_id = {programID} ;"
    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Program deleted successfully", "primary")
    except Exception as e:
        flash(str(e), "danger")
    return redirect(url_for("getProgram"))





@app.route("/executives", methods = ["GET", "POST"]) ## "GET" by default
def createExecutive():
    """
    Add new executive in the database
    """
    form = ExecutiveForm()
    ## when the form is submitted
    if(request.method == "POST"):
        newExecutive = form.__dict__
        query = "INSERT INTO executive(executive_id, first_name,last_name) VALUES (NULL,'{}', '{}');".format(newExecutive['first_name'].data, newExecutive['last_name'].data)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Executive inserted successfully", "success")
            return redirect(url_for("createExecutive"))
        except Exception as e: ## OperationalError
            flash(str(e), "danger")
    ## else, response for GET request
    return render_template("executive-create.html", form = form)




@app.route("/executives/delete-update", methods = ["GET"])
def getExecutive():
	try:
		form = ExecutiveForm()
		cur = db.connection.cursor()
		cur.execute("select *from executive;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("executives.html", QUERY42 = res, form = form)








@app.route("/executives/delete-update/update/<int:executiveID>", methods = ["POST"])
def updateExecutive(executiveID):
    """
    Update an executive in the database, by id
    """
    form = ExecutiveForm()
    updateData = form.__dict__
    if(form.validate_on_submit()):
        query = "UPDATE executive SET first_name = '{}', last_name = '{}' WHERE executive_id = {};".format(updateData['first_name'].data, updateData['last_name'].data, executiveID)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Executive updated successfully", "success")
        except Exception as e:
            flash(str(e), "danger")
    else:
        for category in form.errors.values():
            for error in category:
                flash(error, "danger")
    return redirect(url_for("getExecutive"))


@app.route("/executives/delete-update/delete/<int:executiveID>", methods = ["POST"])
def deleteExecutive(executiveID):
    """
    Delete executive by id from database
    """
    query = f"DELETE FROM executive WHERE executive_id = {executiveID} ;"
    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Executive deleted successfully", "primary")
    except Exception as e:
        flash(str(e), "danger")
    return redirect(url_for("getExecutive"))










@app.route("/works_on", methods = ["GET", "POST"]) ## "GET" by default
def createWorkson():
    """
    Add new working relation in the database
    """
    form = WorksonForm()
    ## when the form is submitted
    if(request.method == "POST"):
        newWorkson = form.__dict__
        query = "INSERT INTO works_on(workson_id, project_id, res_id) VALUES (NULL,'{}', '{}');".format(newWorkson['project_id'].data, newWorkson['res_id'].data)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Working Relation inserted successfully", "success")
            return redirect(url_for("createWorkson"))
        except Exception as e: ## OperationalError
            flash(str(e), "danger")
    ## else, response for GET request
    return render_template("workson-create.html", form = form)




@app.route("/works_on/delete-update", methods = ["GET"])
def getWorkson():
	try:
		form = WorksonForm()
		cur = db.connection.cursor()
		cur.execute("select *from works_on;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("workson.html", QUERY43 = res, form = form)








@app.route("/works_on/delete-update/update/<int:worksonID>", methods = ["POST"])
def updateWorkson(worksonID):
    """
    Update a Working Relation in the database, by id
    """
    form = WorksonForm()
    updateData = form.__dict__
    if(form.validate_on_submit()):
        query = "UPDATE works_on SET project_id = '{}', res_id = '{}' WHERE workson_id = {};".format(updateData['project_id'].data, updateData['res_id'].data, worksonID)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Working Relation updated successfully", "success")
        except Exception as e:
            flash(str(e), "danger")
    else:
        for category in form.errors.values():
            for error in category:
                flash(error, "danger")
    return redirect(url_for("getWorkson"))


@app.route("/works_on/delete-update/delete/<int:worksonID>", methods = ["POST"])
def deleteWorkson(worksonID):
    """
    Delete Working Relation by id from database
    """
    query = f"DELETE FROM works_on WHERE workson_id = {worksonID} ;"
    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Working Relation deleted successfully", "primary")
    except Exception as e:
        flash(str(e), "danger")
    return redirect(url_for("getWorkson"))









@app.route("/administrates", methods = ["GET", "POST"]) ## "GET" by default
def createAdministrates():
    """
    Add new administrating relation in the database
    """
    form = AdministratesForm()
    ## when the form is submitted
    if(request.method == "POST"):
        newAdministrates = form.__dict__
        query = "INSERT INTO administrates(project_id,res_id) VALUES ('{}', '{}');".format(newAdministrates['project_id'].data, newAdministrates['res_id'].data)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Administrating Relation inserted successfully", "success")
            return redirect(url_for("createAdministrates"))
        except Exception as e: ## OperationalError
            flash(str(e), "danger")
    ## else, response for GET request
    return render_template("administrates-create.html", form = form)




@app.route("/administrates/delete-update", methods = ["GET"])
def getAdministrates():
	try:
		form = AdministratesForm()
		cur = db.connection.cursor()
		cur.execute("select *from administrates order by project_id;")
		column_names = [i[0] for i in cur.description]
		res = [dict(zip(column_names,entry)) for entry in cur.fetchall()]
	except Exception as e:
		print(e)
		res = []
	return render_template("administrates.html", QUERY45 = res, form = form)








@app.route("/administrates/delete-update/update/<int:administratesID>", methods = ["POST"])
def updateAdministrates(administratesID):
    """
    Update a Administrating Relation in the database, by id
    """
    form = AdministratesForm()
    updateData = form.__dict__
    if(form.validate_on_submit()):
        query = "UPDATE administrates SET project_id = '{}', res_id = '{}' WHERE project_id = {};".format(updateData['project_id'].data, updateData['res_id'].data, administratesID)
        try:
            cur = db.connection.cursor()
            cur.execute(query)
            db.connection.commit()
            cur.close()
            flash("Administrating Relation updated successfully", "success")
        except Exception as e:
            flash(str(e), "danger")
    else:
        for category in form.errors.values():
            for error in category:
                flash(error, "danger")
    return redirect(url_for("getAdministrates"))


@app.route("/administrates/delete-update/delete/<int:administratesID>", methods = ["POST"])
def deleteAdministrates(administratesID):
    """
    Delete Administrating Relation by id from database
    """
    query = f"DELETE FROM administrates WHERE project_id = {administratesID} ;"
    try:
        cur = db.connection.cursor()
        cur.execute(query)
        db.connection.commit()
        cur.close()
        flash("Administrating Relation deleted successfully", "primary")
    except Exception as e:
        flash(str(e), "danger")
    return redirect(url_for("getAdministrates"))







if(__name__ == "__main__"):
    app.run(debug = True, host = "localhost", port = 3000)
